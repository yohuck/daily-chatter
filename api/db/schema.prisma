datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:


model User {
  id                  Int        @id @default(autoincrement())
  username            String?    @unique
  email               String?    @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  admin               Boolean
  subscribedTopics    Topic[]
  responses           Response[]
}

//Topics are categories. Users can subscribe to certain Topics.
model Topic {
  id          Int      @id @default(autoincrement())
  title       String
  user        User @relation(fields:[userId], references:[id])
  userId      Int
  prompts     Prompt[]

  @@unique([userId])
}

// Prompt is organized by Topics
model Prompt {
  id          Int        @id @default(autoincrement())
  title       String
  body        String
  dispalyDate String
  topic       Topic @relation(fields:[topicId], references:[id])
  topicId     Int
  responses   Response[]

  @@unique([topicId])
}

//Responses display under prompts and are created by users.
model Response {
  id            Int @id @default(autoincrement())
  body          String
  createdAt     DateTime @default(now())
  upvotes       Int
  downvotes     Int
  reports       Int
  supervote     Int
  prompt        Prompt @relation(fields: [promptId], references: [id])
  promptId      Int
  user          User @relation(fields:[userId], references: [id])
  userId        Int

  @@unique([promptId, userId])
}

//This does something....
model Message {
  id             Int      @id @default(autoincrement())
  name           String
  email          String
  messageContent String
  createdAt      DateTime @default(now())
}

